@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper


<div class="header-links header-links-wrapper">

    <div class="head-low-end">
        <ul>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
            @if (Model.WishlistEnabled)
            {
                <li id="">
                    <a href="@Url.RouteUrl("Wishlist")" target="_blank" data-toggle="tooltip" data-placement="top" title="@T("Wishlist")">
                        <div class="cart-content">
                            <img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/wishlist.svg">
                        </div>
                    </a>
                </li>
            }
            @if (Model.ShoppingCartEnabled)
            {
                <li id="topcartlink">
                    <a href="@Url.RouteUrl("ShoppingCart")" target="_blank" data-toggle="tooltip" data-placement="top" title="@T("ShoppingCart")">
                        <div class="cart-content">
                            <img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/cart.svg">
                        </div>
                    </a>                   
                </li>
            }
            @*<a href="#" target="_blank">
            <div class="cart-content">
            <img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/cart.svg">
            </div>
            </a>*@
            @if (Model.AllowPrivateMessages)
            {
                <li id="">
                    <a href="@Url.RouteUrl("PrivateMessages")" target="_blank" data-toggle="tooltip" data-placement="top" title="@T("PrivateMessages.Inbox")">
                        <div class="cart-content">
                            <img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/Inbox.svg">
                        </div>
                    </a>
                </li>
                @*<li>
                    <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox" title="@T("PrivateMessages.Inbox")">
                        <span class="inbox-label"><img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/Inbox.svg"></span>
                        <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                    </a>
                </li>*@
            }
            @if (Model.IsAuthenticated)
            {
                <li>
                    <a href="@Url.RouteUrl("CustomerInfo")" target="_blank" data-toggle="tooltip" data-placement="top" title="@T("Account.MyAccount")">
                        <div class="cart-content">
                            <img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/user.svg">
                        </div>
                    </a>
                </li>
                <li>
                    <a href="@Url.RouteUrl("Logout")" target="_blank" data-toggle="tooltip" data-placement="top" title="@T("Account.Logout")">
                        <div class="cart-content">
                            <img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/logout.svg">
                        </div>
                    </a>
                </li>
                @*<li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@* @Model.CustomerName* @</a></li>*@

                @*<li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>*@
            }
            else
            {
                var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url) ? url.ToString() : webHelper.GetRawUrl(Context.Request);


                <li class="">
                    <div class="User-module">
                        <div class="cart-content">
                            <img src="~/Themes/ClusterDark/Content/images/thumbs/new/icons/user.svg">
                        </div>
                        <div class="User-module-content">
                            <p>
                                <a href="@Url.RouteUrl("Register", new { returnUrl })">
                                    <div class="">
                                        @T("Account.Register")
                                    </div>
                                </a>
                            </p>
                            @if (Model.RegistrationType != UserRegistrationType.Disabled)
                            {
                                <p>
                                    <a href="@Url.RouteUrl("Login", new { returnUrl })">
                                        <div class="">
                                            @T("Account.Login")
                                        </div>
                                    </a>
                                </p>
                            }
                        </div>
                    </div>

                </li>
               @* @if (Model.RegistrationType != UserRegistrationType.Disabled)
                {
                    <li>
                        <a href="@Url.RouteUrl("Register", new { returnUrl })">
                            <div class="cart-content">
                                @T("Account.Register")
                            </div>
                        </a>
                    </li>
                    @*<li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>* @
                }
                <li>
                    <a href="@Url.RouteUrl("Login", new { returnUrl })">
                        <div class="cart-content">
                            @T("Account.Login")
                        </div>
                    </a>
                </li>*@
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
        </ul>
    </div>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }



</div>

@*<div class="header-links">
    <ul>
        @if (Model.IsAuthenticated)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@* @Model.CustomerName* @</a></li>
            <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            @if (Model.RegistrationType != UserRegistrationType.Disabled)
            {
                <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
            }
            <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
        }

        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                    <span class="wishlist-label">@T("Wishlist")</span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                    <span class="cart-label">@T("ShoppingCart")</span>
                    <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </li>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })

    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>*@
<script asp-location="Footer">
    function myFunction() {
        var x = document.getElementById("Demo");
        if (x.className.indexOf("w3-show") == -1) {
            x.className += " w3-show";
        } else {
            x.className = x.className.replace(" w3-show", "");
        }
    }
</script>
